CREATE TABLE IF NOT EXISTS public."user"
(
  user_id SERIAL PRIMARY KEY,
	first_name VARCHAR (50) NOT NULL,
	last_name VARCHAR (50) NOT NULL,
	username VARCHAR (50) UNIQUE NOT NULL,
	password VARCHAR (255) NOT NULL,
	email VARCHAR(25) UNIQUE NOT NULL,
	created_on TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP,
	last_login TIMESTAMP(0),
	timezone VARCHAR (40)
	profile_pic VARCHAR(50),
  reset_token_hash VARCHAR (255),
  reset_token_expires_at TIMESTAMP(0),
)

CREATE TABLE profile (
    user_id INT REFERENCES public.user(user_id) ON DELETE CASCADE,
    age INT,
    height NUMERIC(5, 2),
    weight INT
)

CREATE TABLE daily_exercise (
  user_id INTEGER NOT NULL REFERENCES public.user(user_id),
  date VARCHAR(10) NOT NULL,
  name VARCHAR(20) NOT NULL,
  target SMALLINT NOT NULL,
  actual SMALLINT NOT NULL,
  PRIMARY KEY (user_id, date)
);

CREATE TABLE stay_hydrated (
  user_id INTEGER NOT NULL REFERENCES public.user(user_id),
  date VARCHAR(10) NOT NULL,
  target SMALLINT NOT NULL,
  intaked SMALLINT NOT NULL,
  PRIMARY KEY (user_id, date)
);

CREATE TABLE quality_sleep (
  user_id INTEGER NOT NULL REFERENCES public.user(user_id),
  date VARCHAR(10) NOT NULL,
  bed_time TIME NOT NULL,
  wakeup_time TIME NOT NULL,
  sleep_duration TIME NOT NULL,
  PRIMARY KEY (user_id, date)
);

-- CREATE TABLE email (
--   id SERIAL PRIMARY KEY,
--   recipent VARCHAR(255) NOT NULL,
--   subject VARCHAR(255) NOT NULL,
--   html_body TEXT,
--   text_body TEXT,
--   created_at TIMESTAMP(0),
--   sent_at TIME(0),
--   schedule_at TIME(0)
-- );
--
-- CREATE TABLE email_schedule (
--   id SERIAL PRIMARY KEY,
--   status INTEGER NOT NULL,
--   type VARCHAR(20),
--   turn_on_off_notification_schedule,
--   start_time TIME(0),
--   end_time TIME(0),
--   repeat_count INTEGER
--   user_id INTEGER REFERENCES user(user_id) ON DELETE CASCADE,
-- );

CREATE TABLE email_schedule (
  id SERIAL PRIMARY KEY,
  type VARCHAR(20),
  status INTEGER NOT NULL,
  turn,
  type of activities (Exercise choice/enum),
  start_time TIME(0),
  end_time TIME(0),
  repeat_count INTEGER
  user_id,
  activity id (Not NUll)
  status (queue enum, 0 pending, 1 sent, 2 failed, 3 canceled)
);

UPDATE public.user SET reset_token_hash = NULL , reset_token_expires_at=null;